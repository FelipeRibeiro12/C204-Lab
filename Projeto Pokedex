#include <iostream>
#include <cstring>

using namespace std;

struct treenode{
	int number;
    char name[50];
    char type[10];
    int atack;
    int life;
    treenode* left;
    treenode* right;
};


typedef treenode *treenodeptr;

// INSERE OS POKEMONS NA POKEDEX
void newPokemon(treenodeptr &p,  int nPokemon, char &name, char &type, int atack, int life){
    if (p == NULL){ // insere na raiz
    	p = new treenode;
  		p->number = nPokemon;
        p->name[50] = name;
    	p->type[10] = type;
    	p->atack = atack;
    	p->life = life;
        p->left = NULL;
        p->right = NULL;
    }
    else if (nPokemon < p->number) // insere na subarvore leftuerda
        newPokemon(p->left, nPokemon, name, type, atack, life);
    
    else // insere na subarvore righteita
        newPokemon(p->right, nPokemon, name, type, atack, life);
}

// Procura o valor inteiro na árvore
treenodeptr tPesq(treenodeptr p, char &name){
    if (p == NULL) // elemento não encontrado
        return NULL;
    
    else if (strcmp(&name, p->name) == 0) // elemento encontrado na raiz
        return p;
    
    //else if (strcmp(&name, p->name) == 1) // procura na sub árvore esquerda
        //return tPesq(p->left, name);
    
    else // procura na sub árvore direita
        return tPesq(p->right, name);
}

void emOrdem(treenodeptr p){
	
	char name[50];
	char type[10];
	
    if (p != NULL){
        emOrdem(p->left);
        
        strcpy(name, p->name);
        strcpy(type, p->type);
        //cout << p->number << endl;
        cout << name << endl;
        cout << type << endl;
        cout << p->atack << endl;
        cout << p->life << endl;
        cout << endl;
        emOrdem(p->right);
    }
}

// DELETA A POKEDEX POR INTEIRO
void pDestruir(treenodeptr &pokedex){
	if (pokedex != NULL){ // Destrói os nós um por um de baixo pra cima
		pDestruir(pokedex->left);
		pDestruir(pokedex->right);
		delete pokedex;
	}
	pokedex = NULL;
}

// ´arvore binaria vazia e representada por uma variável ponteiro com conteúdo nulo
int main(){
	treenodeptr pokedex = NULL;
	
	int choice;
	int choiceaux;
	int nPokemon;
	
    char name[30];
    char type[10];
    int atack;
    int life;
    
	nPokemon = 0;
	
    do{
        cout << "-- MENU --" << endl;
		cout << "1 para adicionar um pokemon a pokedex;" << endl; 
		cout << "2 para remover um pokemon;" << endl;
		cout << "3 para procurar um pokemon;" << endl;
		cout << "4 para ver os pokemons cadastrados:" << endl;
        cin >> choice;
        cin.ignore();

        switch (choice){
            case 1:
            	do{
            		nPokemon++;
					cout << "Digite abaixo os dados do pokemon:" << endl;
					cout << " Nome: ";
                	cin.getline(name, 50);
                	cout << endl << "Tipo: ";
                	cin.getline(type, 10);
                	cout << endl << "Forca do ataque: ";
                	cin >> atack;
                	cout << endl << "Vida: ";
                	cin >> life;
                	
                	newPokemon(pokedex, nPokemon, *name, *type, atack, life);
                	
                	cout << "Pokemon adicionado!" << endl;
                	cout << "0 para sair do cadastro;" << endl;
                	cout << "1 para adicionar outro pokemon a pokedex" << endl;
                	cin >> choiceaux;
                	cin.ignore();
                	
				}  while (choiceaux != 0);
                break;
            
            /*case 2:
                cout << "Digite o nome do pokémon a ser removido: ";
                cin >> name;
                pokedex.RemovePokemon(name);
                break;*/
            
            case 3:
            	char aux[50];
                cout << "Digite o nome do pokemon:" << endl;
                cin.ignore();
                cin.getline(aux, 50);
                tPesq(pokedex, *aux);
                break;
            
            case 4:
                cout << "Pokémons cadastrados: " << endl;
                emOrdem(pokedex);
                break;
            
            default:
                cout << "Opcao invalida. Tente novamente." << endl;
                break;
        }

    }while (choice != 0);
    return 0;
}
